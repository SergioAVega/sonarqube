pipeline {
    agent any

    environment {
        // Define environment variables if needed
        DOTNET_ROOT = tool name: 'dotnet', type: 'Tool'
        PATH = "$DOTNET_ROOT:$PATH"
        SONARQUBE_SCANNER_HOME = tool name: 'SonarQube Scanner', type: 'Tool'
    }

    stages {
        stage('Checkout') {
            steps {
                // Check out your source code from your version control system (e.g., Git)
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                // Restore, build, and test the .NET project
                script {
                    sh 'dotnet restore'
                    sh 'dotnet build -c Release'
                    sh 'dotnet test --no-restore --no-build'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Execute SonarQube scanner to analyze the project
                script {
                    sh "${SONARQUBE_SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }
    }

    post {
        failure {
            // Define actions to take on pipeline failure
            emailext(
                subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                body: "The Jenkins pipeline for the .NET project failed. Please investigate.",
                recipientProviders: [culprits()]
            )
        }

        success {
            // Define actions to take on pipeline success
            echo "Pipeline succeeded!"
        }
    }
}
